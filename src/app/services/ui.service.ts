import { Injectable, signal, WritableSignal, effect } from '@angular/core';
import { 
  AppView, AuthView, ProfileView, UsersAndRolesView,
  Company, Contact, Opportunity, Task, Activity, User, EmailTemplate, ColumnConfig, AutoActivity, ImportableEntity, RelatedEntity
} from '../models/crm.models';

type ColumnCustomizableTableName = 'companies' | 'contacts' | 'opportunities' | 'tasks' | 'activities';
type PaginatedTableName = ColumnCustomizableTableName | 'audit-log' | 'email-templates' | 'users' | 'team-contacts';
type TableColumnConfigs = Record<ColumnCustomizableTableName, ColumnConfig[]>;

export interface ContactPopoverData {
  companyId: string;
  position: { x: number; y: number };
}

@Injectable({
  providedIn: 'root',
})
export class UiService {
  // Main application view
  view = signal<AppView>('dashboard');
  
  // Sidebar state
  isSidebarOpen = signal(false);

  // Auth view state
  authView = signal<AuthView>('login');

  // Header profile menu state
  isProfileMenuOpen = signal(false);

  // Profile modal state
  isProfileModalOpen = signal(false);
  profileView = signal<ProfileView>('personal-info');

  // Users & Roles page view
  usersAndRolesView = signal<UsersAndRolesView>('users');

  // Fix: Use `undefined` to represent a closed/uninitialized state for entity modals. `null` will represent creating a new entity.
  // Modal states for CRUD operations
  selectedCompany = signal<Company | null | undefined>(undefined);
  selectedContact = signal<Contact | null | undefined>(undefined);
  selectedOpportunity = signal<Opportunity | null | undefined>(undefined);
  editingTask = signal<Partial<Task> | null | undefined>(undefined);
  editingActivity = signal<Activity | null | undefined>(undefined);
  autoGeneratedActivity = signal<AutoActivity | null>(null);
  editingUser = signal<User | null | undefined>(undefined);
  editingTemplate = signal<EmailTemplate | null | undefined>(undefined);
  previewingTemplate = signal<EmailTemplate | undefined>(undefined);
  
  // Email Composer
  emailComposerData = signal<{ to: string; subject: string; body: string; relatedEntity: RelatedEntity | null }>({ to: '', subject: '', body: '', relatedEntity: null });

  // Import Modal state
  isImportModalOpen = signal(false);
  importTarget = signal<ImportableEntity | null>(null);
  importStep = signal<'upload' | 'map'>('upload');
  csvHeaders = signal<string[]>([]);
  csvData = signal<{[key: string]: string}[]>([]);
  fieldMappings = signal<{[key: string]: string}>({});
  
  // Column customization state
  activeColumnCustomization = signal<ColumnCustomizableTableName | null>(null);
  tableColumnConfigs: WritableSignal<TableColumnConfigs> = signal({
    companies: [
      { id: 'name', label: 'Company Name', visible: true },
      { id: 'industry', label: 'Industry', visible: true },
      { id: 'website', label: 'Website', visible: true },
      { id: 'createdAt', label: 'Created At', visible: false },
    ],
    contacts: [
      { id: 'name', label: 'Name', visible: true },
      { id: 'email', label: 'Email', visible: true },
      { id: 'phone', label: 'Phone', visible: true },
      { id: 'company', label: 'Company', visible: true },
      { id: 'owner', label: 'Owner', visible: true },
    ],
    opportunities: [
      { id: 'name', label: 'Name', visible: true },
      { id: 'company', label: 'Company', visible: true },
      { id: 'stage', label: 'Stage', visible: true },
      { id: 'value', label: 'Value', visible: true },
      { id: 'closeDate', label: 'Close Date', visible: true },
      { id: 'owner', label: 'Owner', visible: true },
    ],
    tasks: [
      { id: 'title', label: 'Title', visible: true },
      { id: 'dueDate', label: 'Due Date', visible: true },
      { id: 'owner', label: 'Owner', visible: true },
      { id: 'relatedEntity', label: 'Related To', visible: true },
      { id: 'status', label: 'Status', visible: true },
    ],
    activities: [
      { id: 'type', label: 'Type', visible: true },
      { id: 'subject', label: 'Subject', visible: true },
      { id: 'owner', label: 'Owner', visible: true },
      { id: 'relatedEntity', label: 'Related To', visible: true },
      { id: 'date', label: 'Date', visible: true },
    ],
  });

  // Pagination State
  pagination = signal<{
    itemsPerPage: number;
    currentPage: { [key in PaginatedTableName]?: number };
  }>({
    itemsPerPage: 10,
    currentPage: {},
  });

  // Contact Popover state
  contactPopoverData = signal<ContactPopoverData | null>(null);

  constructor() {
    this.loadPaginationFromLocalStorage();

    // Persist items per page setting
    effect(() => {
      const itemsPerPage = this.pagination().itemsPerPage;
      localStorage.setItem('crm-items-per-page', JSON.stringify(itemsPerPage));
    });
  }

  private loadPaginationFromLocalStorage() {
    const storedItemsPerPage = localStorage.getItem('crm-items-per-page');
    if (storedItemsPerPage) {
      try {
        const parsed = JSON.parse(storedItemsPerPage);
        if (typeof parsed === 'number' && [9, 10, 12, 24, 25, 50].includes(parsed)) {
          this.pagination.update(p => ({ ...p, itemsPerPage: parsed }));
        }
      } catch (e) {
        console.error('Could not parse stored pagination state', e);
      }
    }
  }


  // --- View Management ---
  changeView(view: AppView) {
    this.view.set(view);
    this.isSidebarOpen.set(false);
  }

  // --- Modal Management ---
  openProfileModal() {
    this.isProfileModalOpen.set(true);
    this.isProfileMenuOpen.set(false);
    this.profileView.set('personal-info');
  }

  closeProfileModal() {
    this.isProfileModalOpen.set(false);
  }
  
  openCompanyDetails(company: Company | null) {
    this.selectedCompany.set(company);
  }

  closeCompanyDetails() {
    this.selectedCompany.set(undefined);
  }

  openContactModal(contact: Contact | null) {
    this.selectedContact.set(contact);
  }

  closeContactModal() {
    this.selectedContact.set(undefined);
  }

  openOpportunityModal(opp: Opportunity | null) {
    this.selectedOpportunity.set(opp);
  }

  closeOpportunityModal() {
    this.selectedOpportunity.set(undefined);
  }
  
  openTaskModal(task: Partial<Task> | null) {
    this.editingTask.set(task);
  }

  closeTaskModal() {
    this.editingTask.set(undefined);
  }

  openActivityEditModal(activity: Activity | null) {
    this.editingActivity.set(activity);
  }

  closeActivityEditModal() {
    this.editingActivity.set(undefined);
  }

  openUserModal(user: User | null) {
    this.editingUser.set(user);
  }

  closeUserModal() {
    this.editingUser.set(undefined);
  }

  openTemplateEditor(template: EmailTemplate | null) {
    this.editingTemplate.set(template);
  }
  
  closeTemplateEditor() {
    this.editingTemplate.set(undefined);
  }

  openTemplatePreview(template: EmailTemplate) {
    this.previewingTemplate.set(template);
  }

  closeTemplatePreview() {
    this.previewingTemplate.set(undefined);
  }
  
  openEmailComposer(data: { to: string; subject: string; body: string; relatedEntity: RelatedEntity | null }) {
    this.emailComposerData.set(data);
  }

  closeEmailComposer() {
    // Reset composer data on close
    this.emailComposerData.set({ to: '', subject: '', body: '', relatedEntity: null });
  }

  openImportModal(target: ImportableEntity) {
    this.importTarget.set(target);
    this.isImportModalOpen.set(true);
    this.importStep.set('upload');
    this.csvData.set([]);
    this.csvHeaders.set([]);
    this.fieldMappings.set({});
  }

  closeImportModal() {
    this.isImportModalOpen.set(false);
    this.importTarget.set(null);
  }

  // --- Contact Popover ---
  openContactPopover(data: ContactPopoverData) {
    this.contactPopoverData.set(data);
  }

  closeContactPopover() {
    this.contactPopoverData.set(null);
  }

  // --- Pagination Management ---
  setItemsPerPage(count: number) {
    this.pagination.update(p => ({
      itemsPerPage: count,
      currentPage: {} // Reset all pages when items per page changes
    }));
  }

  setCurrentPage(table: PaginatedTableName, page: number) {
    this.pagination.update(p => ({
      ...p,
      currentPage: {
        ...p.currentPage,
        [table]: page
      }
    }));
  }
}